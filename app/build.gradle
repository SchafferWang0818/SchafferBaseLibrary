apply plugin: 'com.android.application'
apply plugin: 'realm-android'

android {
    compileSdkVersion rootProject.ext.android.compileSdkVersion
    buildToolsVersion rootProject.ext.android.buildToolsVersion
//    签名文件账号密码
//    signingConfigs {
//        config {
//            keyAlias 'name'
//            keyPassword 'ezcx@2'
//            storeFile file('../jksName.jks')
//            storePassword 'ezcx@2'
//        }
//    }
    defaultConfig {
        applicationId "com.schaffer.base"
        minSdkVersion rootProject.ext.android.minSdkVersion
        targetSdkVersion rootProject.ext.android.targetSdkVersion
        versionCode rootProject.ext.android.versionCode
        versionName rootProject.ext.android.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

//        签名文件
//        signingConfig signingConfigs.config

//        直接简单粗暴的兼容armeabi
//        ndk {
//            abiFilters "armeabi"
//        }

    }
    buildTypes {
        debug {
//        签名文件
//        signingConfig signingConfigs.config
        }
        release {
            minifyEnabled false //是否开启混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

//        签名文件
//        signingConfig signingConfigs.config

//            shrinkResources true                  //gradle去除无用资源
        }
        applicationVariants.all { variant ->
            variant.outputs.each { output ->
                def outputFile = output.outputFile
                if (outputFile != null && outputFile.name.endsWith('.apk')) {
                    def versionName = defaultConfig.versionName.replace(".", "_")
                    def fileName = outputFile.name.replace(".apk", "-v${versionName}.apk")
                    fileName = fileName.replace("app", "${defaultConfig.applicationId}")
                    if (variant.buildType.name.equals('release')) {
                        output.outputFile = file("${outputFile.parent}/release/${defaultConfig.versionName}/${fileName}")
                    } else {
                        output.outputFile = file("${outputFile.parent}/${fileName}")
                    }
                }
            }
        }

    }

//    lintOptions{
//        checkReleaseBuilds false     //在打包Release版本的时候进行(多语言等)检测
//        abortOnError false              //打包报错是否停止打包
//    }

}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    testCompile 'junit:junit:4.12'
    compile rootProject.ext.dependencies["appcompat-v7"]
    compile rootProject.ext.dependencies["constraint"]
    compile rootProject.ext.dependencies["design"]
    compile rootProject.ext.dependencies["recyclerview"]
    compile rootProject.ext.dependencies["multidex"]
    compile rootProject.ext.dependencies["retrofit"]
    compile rootProject.ext.dependencies["retrofit-converter"]
    compile rootProject.ext.dependencies["retrofit-adapter"]
    compile rootProject.ext.dependencies["okhttp"]
    compile rootProject.ext.dependencies["okhttp-logging"]
    compile rootProject.ext.dependencies["rxandroid"]
    compile rootProject.ext.dependencies["rxjava"]
    compile rootProject.ext.dependencies["gson"]
    compile rootProject.ext.dependencies["glide"]
    compile rootProject.ext.dependencies["circleimageview"]
    compile rootProject.ext.dependencies["eventbus"]
    compile rootProject.ext.dependencies["xlhratingbar_lib"]
    compile rootProject.ext.dependencies["pickerview"]
}
